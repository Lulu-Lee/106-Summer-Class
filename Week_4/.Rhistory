linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_ver) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_ver) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
anova(m1 <- lm(math ~ prime_genre, data = Apps))
anova(m1 <- lm(rating_count_tot ~ prime_genre, data = Apps))
ggplot(data = Apps,
aes(group = prime_genre,
y = rating_count_tot, x = price)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
stat_smooth(aes(group = prime_genre,
y = rating_count_tot, x = price),
method = 'lm', se = F) +
facet_grid( . ~  prime_genre) +
labs(x = 'price', y = 'rating_count_tot')
#先把軟體類別欄位內各個類別順序定下來(order of factors)
Apps$prime_genre <- factor(Apps$prime_genre,
levels = c('Book',
'Business',
'Education',
'Entertainment',
'Finance',
'Food & Drink',
'Games',
'Health & Fitness',
'Lifestyle',
'Medical',
'Music',
'Navigation',
'News',
'Photo & Video',
'Productivity',
'Reverence',
'Shopping',
'Social Networking',
'Sports',
'Travel',
'Utilities',
'Weather',
'NA'))
#看不同軟體類別下的下載次數平均數
tapply(Apps$rating_count_tot, Apps$prime_genre, mean)
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
#scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#先把軟體類別欄位內各個類別順序定下來(order of factors)
Apps$prime_genre <- factor(Apps$prime_genre,
levels = c('Book',
'Business',
'Education',
'Entertainment',
'Finance',
'Food & Drink',
'Games',
'Health & Fitness',
'Lifestyle',
'Medical',
'Music',
'Navigation',
'News',
'Photo & Video',
'Productivity',
'Reverence',
'Shopping',
'Social Networking',
'Sports',
'Travel',
'Utilities',
'Weather',
'Catalogs'))
#看不同軟體類別下的下載次數平均數
tapply(Apps$rating_count_tot, Apps$prime_genre, mean)
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
anova(m1 <- lm(rating_count_tot ~ prime_genre, data = Apps))
ggplot(data = Apps,
aes(group = prime_genre,
y = rating_count_tot, x = price)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
stat_smooth(aes(group = prime_genre,
y = rating_count_tot, x = price),
method = 'lm', se = F) +
facet_grid( . ~  prime_genre) +
labs(x = 'price', y = 'rating_count_tot')
#把教育資源加進模型
anova(m2 <- update(m1, . ~ . +
price, data = Apps))
#或許不是父母教育而是教育資源造成
anova(m3 <- update(m2, . ~ . - prime_genre,  data = Apps))
#把價錢加進模型
anova(m2 <- update(m1, . ~ . +
price, data = Apps))
#或許不是類別而是價錢造成...?
anova(m3 <- update(m2, . ~ . - prime_genre,  data = Apps))
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
require(coefplot)
m2 <- lm(rating_count_tot ~ prime_genre + price- 1,
data = Apps)
coefplot(m2, xlab = '估計值', ylab = '迴歸變項', title = '反應變項 = 下載次數')
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(ggplot2)
library(Hmisc)
library(heplots)
install.packages("heplots")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(ggplot2)
library(Hmisc)
library(heplots)
AppData = read.csv("./Apple_Store.csv/AppleStore(Ver.1).csv")
Apps <- AppData[1:1000, ]
str(Apps)
head(Apps)
summary(Apps)
#先把軟體類別欄位內各個類別順序定下來(order of factors)
Apps$prime_genre <- factor(Apps$prime_genre,
levels = c('Book',
'Business',
'Education',
'Entertainment',
'Finance',
'Food & Drink',
'Games',
'Health & Fitness',
'Lifestyle',
'Medical',
'Music',
'Navigation',
'News',
'Photo & Video',
'Productivity',
'Reverence',
'Shopping',
'Social Networking',
'Sports',
'Travel',
'Utilities',
'Weather',
'Catalogs'))
#看不同軟體類別下的下載次數平均數
tapply(Apps$rating_count_tot, Apps$prime_genre, mean)
#同軟體類別下的下載次數平均數，加上信賴區間
ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
anova(m1 <- lm(rating_count_tot ~ prime_genre, data = Apps))
ggplot(data = Apps,
aes(group = prime_genre,
y = rating_count_tot, x = price)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
stat_smooth(aes(group = prime_genre,
y = rating_count_tot, x = price),
method = 'lm', se = F) +
facet_grid( . ~  prime_genre) +
labs(x = 'price', y = 'rating_count_tot')
#把價錢加進模型
anova(m2 <- update(m1, . ~ . +
price, data = Apps))
#或許不是類別而是價錢造成...?
anova(m3 <- update(m2, . ~ . - prime_genre,  data = Apps))
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
require(coefplot)
m2 <- lm(rating_count_tot ~ prime_genre + price- 1,
data = Apps)
coefplot(m2, xlab = '估計值', ylab = '迴歸變項', title = '反應變項 = 下載次數')
fit_m2 <- data.frame(dta[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
fit_m2 <- data.frame(Apps[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
ggplot(data = fit_m2, aes(x = rating_count_tot, group = prime_genre )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(dta, tapply(rating_count_tot, prime_genre, mean))), linetype = 'dotted')+
facet_grid(prime_genre ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '下載次數', y = '機率密度')
fit_m2 <- data.frame(Apps[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
fit_m2 <- data.frame(Apps[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
ggplot(data = fit_m2, aes(x = scale(resid)), group = prime_genre ) +
stat_density(geom = 'path', position = 'identity', aes(linetype = prime_genre)) +
scale_linetype_manual(values = 5:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = '機率密度') +
theme(legend.position = c(.15, .8))
require(lattice)
qqmath(~ scale(resid) | prime_genre, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
require(MASS)
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = prime_genre )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(prime_genre ~ .) +
labs(x = '類別預測值', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = infl, y = scale(resid), group = prime_genre)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(prime_genre ~ .) +
labs(x = '影響值', y = '標準化殘差')
summary(influence(m2)$hat)
theme_set(old)
Apps_count <- Apps[, c('rating_counts_tot', 'user_rating',
'cont_rating', 'lang_num')]
Apps_count <- Apps[, c(rating_counts_tot, user_rating,
cont_rating, lang_num)]
Apps_count <- Apps[, c(rating_count_tot, user_rating,
cont_rating, lang_num)]
colMeans(Apps_count)
Apps_count <- Apps[, c(rating_count_tot, user_rating,
cont_rating, lang_num)]
Apps_count <- Apps[, c("rating_count_tot", "user_rating",
"cont_rating", "lang_num")]
Apps_count <- Apps[, ("rating_count_tot", "user_rating",
Apps_count <- Apps[, "rating_count_tot", "user_rating",
"cont_rating", "lang_num"]
Apps_count <- Apps[, "rating_count_tot", "user_rating",
"cont_rating", "lang.num"]
Apps_count <- Apps[, c('rating_count_tot', 'user_rating',
'cont_rating', 'lang.num')]
colMeans(Apps_count)
colMeans(Apps_count)
colMeans(Apps_count)
Apps_count <- Apps[, c('rating_count_tot', 'user_rating',
'sup_devices.num, 'lang.num')]
View(Apps_count)
Apps_count <- Apps[, c('rating_count_tot', 'user_rating',
'sup_devices.num, 'lang.num' )]
Apps_count <- Apps[, c('rating_count_tot', 'user_rating',
'sup_devices.num, 'lang.num')]
colMeans(Apps_count)
View(Apps_count)
scatterplotMatrix(~ rating_count_tot + user_rating + cont_rating + lang_num, data= Apps_count,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
require(corrplot)
corrplot(cor(Apps_count), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
summary(m4 <- lm(rating_count_tot ~ rating_count_tot + user_rating + cont_rating + lang_num, data= Apps_count))
scatterplotMatrix(~ rating_count_tot + user_rating + cont_rating + lang.num, data= Apps_count,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
require(corrplot)
corrplot(cor(Apps_count), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
install.packages("corrplot")
library(knitr)
library(ggplot2)
library(Hmisc)
library(heplots)
library(corrplot)
scatterplotMatrix(~ rating_count_tot + user_rating + cont_rating + lang.num, data= Apps_count,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
corrplot(cor(Apps_count), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
Apps_count <- Apps[, c('rating_count_tot', 'user_rating', 'sup_devices.num, )]
Apps_count <- Apps[, c('rating_count_tot', 'user_rating', 'sup_devices.num )]
Apps_count <- Apps[, c('rating_count_tot', 'user_rating', 'sup_devices.num' )]
Apps_count <- Apps[, c('rating_count_tot', 'user_rating', 'sup_devices.num', 'lang.num' )]
colMeans(Apps_count)
corrplot(cor(Apps_count), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
scatterplotMatrix(~ rating_count_tot + user_rating + cont_rating + lang.num, data= Apps_count,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
scatterplotMatrix(~ rating_count_tot + user_rating + sup_devices.num + lang.num, data= Apps_count,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
corrplot(cor(Apps_count), method = 'ellipse', order = 'hclust', addrect = 4,
type = 'upper', tl.pos = 'tp')
summary(m4 <- lm(rating_count_tot ~ rating_count_tot + user_rating + cont_rating + lang.num, data= Apps_count))
summary(m4 <- lm(rating_count_tot ~ rating_count_tot + user_rating + sup_devices.num + lang.num, data= Apps_count))
coefplot(m4, predictors = c('user_rating', 'sup_devices.num', 'lang.num'),
xlab = '估計值', ylab = '迴歸變項(去除截距)', title = '反應變項是下載次數')
require(effects)
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
install.packages("effects")
coefplot(m4, predictors = c('user_rating', 'sup_devices.num', 'lang.num'),
xlab = '估計值', ylab = '迴歸變項(去除截距)', title = '反應變項是下載次數')
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
require(lattice)
qqmath(~ scale(resid) | prime_genre, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
require(MASS)
ggplot(data = fit_m2, aes(x = fitted, y = scale(resid), group = prime_genre )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(prime_genre ~ .) +
labs(x = '類別預測值', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = infl, y = scale(resid), group = prime_genre)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(prime_genre ~ .) +
labs(x = '影響值', y = '標準化殘差')
coefplot(m4, predictors = c('user_rating', 'sup_devices.num', 'lang.num'),
xlab = '估計值', ylab = '迴歸變項(去除截距)', title = '反應變項是下載次數')
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
library(lm.beta)
install.packages("lm.beta")
install.packages("lattice")
install.packages("lattice")
library(lm.beta)
summary(lm.beta(m4))
summary(m5 <- update(m4, . ~ . - math.input , data = dta_math))
summary(m5 <- update(m4, . ~ . - math.input , data = Apps_count))
anova(m5, m4)
summary(m5 <- update(m4, . ~ . - user_rating , data = Apps_count))
anova(m5, m4)
m5 <- lm(rating_count_tot ~ user_rating + lang.num + sup_devices.num + price, data = Apps)
fit_m5 <- data.frame(Apps[, c(2, 3, 6, 4, 13)], fitted = fitted(m5), resid = resid(m5), infl = influence(m5)$hat)
#同軟體類別下的下載次數平均數，加上信賴區間
#ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
#ggplot(data = Apps,
aes(x = prime_genre, y = rating_count_tot) +
stat_summary(fun.data = 'mean_cl_boot', size = 1) +
scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
geom_hline(yintercept = mean(Apps$rating_count_tot) ,
linetype = 'dotted') +
labs(x = '軟體類別', y = '下載次數') +
coord_flip())
#同軟體類別下的下載次數平均數，加上信賴區間
# ggplot(data = Apps,
#       aes(x = prime_genre, y = rating_count_tot) +
#  stat_summary(fun.data = 'mean_cl_boot', size = 1) +
#  scale_y_continuous(breaks = seq(0, 10000, by = 1000)) +
#  geom_hline(yintercept = mean(Apps$rating_count_tot) ,
#             linetype = 'dotted') +
#  labs(x = '軟體類別', y = '下載次數') +
#  coord_flip())
ggplot(data = GenderDF, aes(x = gender, y = rate)) +
geom_boxplot() + coord_flip() +
labs( y = 'rate', x = 'gender',
title = 'Birth & Death Rate Box')
with(GenderDF,
tapply(rate, gender,
function(x)
c(mean(x) + c(-2, 2) * sd(x)/sqrt(length(x)))))
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
anova(m3, m2)
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
anova(m3, m2)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq#anova(m3, m2)
#比較在控制類別下，價錢的效果
#(res_lm[[2]]$r.sq - res_lm[[1]]$r.sq)/res_lm[[1]]$r.sq
#anova(m1, m2)
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#將結果放在一個list中
res_lm <- lapply(list(m1, m2, m3), summary)
#比較在控制價錢下，類別的效果
(res_lm[[2]]$r.sq - res_lm[[3]]$r.sq)/res_lm[[2]]$r.sq
fit_m2 <- data.frame(Apps[, c(2, 12, 13)], fitted = fitted(m2), resid = resid(m2),
infl = influence(m2)$hat )
ggplot(data = fit_m2, aes(x = rating_count_tot, group = prime_genre )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(dta, tapply(rating_count_tot, prime_genre, mean))), linetype = 'dotted')+
facet_grid(prime_genre ~ .) +
scale_x_continuous(breaks = seq(200, 900, by = 100))+
labs(x = '下載次數', y = '機率密度')
install.packages("MASS")
install.packages("MASS")
coefplot(m4, predictors = c('user_rating', 'sup_devices.num', 'lang.num'),
xlab = '估計值', ylab = '迴歸變項(去除截距)', title = '反應變項是下載次數')
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
plot(allEffects(m4), main = '', ylim = c(550, 670), grid = T)
anova(m1 <- lm(rate ~ catagory, data =GenderDF2))
ggplot(data = GenderDF2,
aes(group = catagory,
y = rate, x = area)) +
geom_point() +
stat_smooth(method = 'lm', se = F) +
stat_smooth(aes(group = catagory,
y = rate, x = area),
method = 'lm', se = F) +
facet_grid( . ~  catagory) +
labs(x = 'Area', y = 'condiction')
tapply(Apps$rating_count_tot, Apps$prime_genre, mean)
Apps_count <- Apps[, c('rating_count_tot', 'user_rating', 'sup_devices.num', 'lang.num' )]
